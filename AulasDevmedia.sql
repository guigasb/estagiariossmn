--EXEMPLO DE CONSULTA COM CRIAÇÃO DE COLUNA COM CAMPOS CALCULADOS
CREATE DATABASE DB_DEVMEDIA

CREATE TABLE PRODUTOS
(
    CODIGO  INT,
    NOME    VARCHAR(100),
    PRECO   DECIMAL(10,2)
)

INSERT INTO PRODUTOS VALUES (1, 'Café', 3.9), (2, 'Batata', 4.75), (3, 'Arroz', 4.1), (4, 'Açucar', 2.8), (5, 'Macarrão', 1.7), (6, 'Carne', 13.75), (7, 'Frango', 9.29), (8, 'Água', 5.6), (9, 'Detergente', 1.29), (10, 'Sabão em pó', 2.7), (11, 'Sal', 0.95), (12, 'Balde', 7.8), (13, 'Refrigerante 1L', 2.55), (14, 'Suco 200ml', 1.1), (15, 'Pão', 6), (16, 'Bacon', 7.3), (17, 'Calabresa', 8.79), (18, 'Vassoura', 5), (19, 'Leite em pó', 2.99), (20, 'Cerveja', 2)

SELECT CODIGO, NOME, PRECO, 'PROMOCAO'
FROM PRODUTOS

SELECT CODIGO, NOME, PRECO, PRECO + 1 AS PRECO_ACRESCIMO
FROM PRODUTOS



--SELECT COM ORDER BY
SELECT CODIGO, NOME, PRECO
FROM PRODUTOS
ORDER BY PRECO

SELECT CODIGO, NOME, PRECO
FROM PRODUTOS
ORDER BY PRECO DESC

SELECT CODIGO, NOME, PRECO
FROM PRODUTOS
ORDER BY PRECO, NOME

SELECT CODIGO, NOME, PRECO
FROM PRODUTOS
ORDER BY PRECO, NOME ASC



--EXEMPLO COM CAMPOS CALCULADOS FUNÇÔES DE AGREGAÇÃO
  CREATE TABLE VENDAS (
  CODIGO_VENDA INT,
  DATA_VENDA DATE,
  CODIGO_PRODUTO INT,
  QUANTIDADE INT
)

INSERT INTO VENDAS (CODIGO_VENDA, DATA_VENDA, CODIGO_PRODUTO, QUANTIDADE) VALUES (1	,'2016-10-28',	100,	2)
INSERT INTO VENDAS (CODIGO_VENDA, DATA_VENDA, CODIGO_PRODUTO, QUANTIDADE) VALUES (2	,'2016-10-28',	200,	1)
INSERT INTO VENDAS (CODIGO_VENDA, DATA_VENDA, CODIGO_PRODUTO, QUANTIDADE) VALUES (3	,'2016-10-28',	100,	2)
INSERT INTO VENDAS (CODIGO_VENDA, DATA_VENDA, CODIGO_PRODUTO, QUANTIDADE) VALUES (4	,'2016-10-24',	100,	3)
INSERT INTO VENDAS (CODIGO_VENDA, DATA_VENDA, CODIGO_PRODUTO, QUANTIDADE) VALUES (5	,'2016-10-24',	200,	4)
INSERT INTO VENDAS (CODIGO_VENDA, DATA_VENDA, CODIGO_PRODUTO, QUANTIDADE) VALUES (7	,'2016-10-20',	100,	4)
INSERT INTO VENDAS (CODIGO_VENDA, DATA_VENDA, CODIGO_PRODUTO, QUANTIDADE) VALUES (8	,'2016-10-20',	300,	4)
INSERT INTO VENDAS (CODIGO_VENDA, DATA_VENDA, CODIGO_PRODUTO, QUANTIDADE) VALUES (9	,'2016-10-18',	400,	7)
INSERT INTO VENDAS (CODIGO_VENDA, DATA_VENDA, CODIGO_PRODUTO, QUANTIDADE) VALUES (10	,'2016-10-18',	100,	null)

SELECT SUM(QUANTIDADE) FROM VENDAS WHERE CODIGO_PRODUTO = '100'

SELECT AVG(QUANTIDADE) FROM VENDAS WHERE CODIGO_PRODUTO = '100'

SELECT MAX(QUANTIDADE) FROM VENDAS WHERE CODIGO_PRODUTO = '100'

SELECT MIN(QUANTIDADE) FROM VENDAS WHERE CODIGO_PRODUTO = '100'

SELECT COUNT(*) FROM VENDAS WHERE CODIGO_PRODUTO = '100'

SELECT COUNT(QUANTIDADE) FROM VENDAS WHERE CODIGO_PRODUTO = '100'




--SELECT COM GROUP BY, HAVING E CAMPOS CALCULADOS
SELECT DATA_VENDA
FROM VENDAS
GROUP BY DATA_VENDA --retorna os dias que houveram vendas independente de repetição e do produto

SELECT DATA_VENDA, SUM(QUANTIDADE)
FROM VENDAS
GROUP BY DATA_VENDA --retorna o total de TODOS os produtos vendidos por data sem repetição

SELECT DATA_VENDA, SUM(QUANTIDADE)
FROM VENDAS
WHERE CODIGO_PRODUTO = 200
GROUP BY DATA_VENDA --retorna o total de UM PRODUTO especifico vendido por cada data em que houve venda dele

SELECT DATA_VENDA, SUM(QUANTIDADE)
FROM VENDAS
WHERE CODIGO_PRODUTO = 200
GROUP BY DATA_VENDA
HAVING SUM(QUANTIDADE) > 3 --retorna somente as datas em que houveram vendas de mais de 3 unidades do produto especifico



-- JOINS 
CREATE TABLE CLIENTES
(
	CODIGO			INT,
	NOME			VARCHAR(100),
	CODIGO_VENDEDOR	INT
)

INSERT INTO CLIENTES (CODIGO, NOME, CODIGO_VENDEDOR) VALUES (1, 'Joel Rodrigues', 1), (2, 'Wesley', 1), (3, 'João', 2), (4, 'Teresa', NULL), (5, 'Carlos', NULL), (6, 'Estevão', 3), (7, 'Camila', 2), (8, 'Diego', NULL), (9, 'Antonio', 3), (10, 'Ramon', 1)

CREATE TABLE VENDEDORES
(
	CODIGO	INT,
	NOME	VARCHAR(100)
)

INSERT INTO VENDEDORES VALUES (1, 'André'), (2, 'Gilberto'), (3, 'Daniela'), (4, 'Marcilio')

SELECT CLIENTES.CODIGO,
	   CLIENTES.NOME,
       CLIENTES.CODIGO_VENDEDOR,
       VENDEDORES.NOME
FROM CLIENTES
INNER JOIN VENDEDORES ON CLIENTES.CODIGO_VENDEDOR = VENDEDORES.CODIGO

SELECT CLIENTES.CODIGO,
	   CLIENTES.NOME,
       CLIENTES.CODIGO_VENDEDOR,
       VENDEDORES.NOME
FROM CLIENTES
LEFT JOIN VENDEDORES ON CLIENTES.CODIGO_VENDEDOR = VENDEDORES.CODIGO --retorna todos os clientes, mostrando os que também não foram atendidos por nenhum vendedor

SELECT CLIENTES.CODIGO,
	   CLIENTES.NOME,
       CLIENTES.CODIGO_VENDEDOR,
       VENDEDORES.NOME
FROM CLIENTES
RIGHT JOIN VENDEDORES ON CLIENTES.CODIGO_VENDEDOR = VENDEDORES.CODIGO --retorna todos os vendedores, mostrando os que também não atenderam clientes




--SINTAXE SELECT COM UNION

CREATE TABLE CONTAS_RECEBER
(
	DESCRICAO	VARCHAR(50),
	VALOR		DECIMAL(10,2),
	VENCIMENTO	DATETIME
)

INSERT INTO CONTAS_RECEBER VALUES ('Venda', 100, '2016-10-20'), ('Venda', 100, '2016-10-20'), ('Venda', 96, '2016-10-20'), ('Venda', 72, '2016-10-20'), ('Devolução', 50, '2016-10-22'), ('Reembolso', 298, '2016-10-12')

CREATE TABLE CONTAS_PAGAR
(
	DESCRICAO	VARCHAR(50),
	VALOR		DECIMAL(10,2),
	VENCIMENTO	DATETIME
)

INSERT INTO CONTAS_PAGAR VALUES ('Aluguel', 600, '2016-10-27'), ('Luz', 12, '2016-10-20'), ('Impostos', 345, '2016-10-21')

SELECT DESCRICAO, VALOR, VENCIMENTO FROM CONTAS_RECEBER
UNION --para usar union, as colunas das tabelas devem ser iguais, estar na mesma ordem e ter o mesmo tipo, o union suprime os registros iguais
SELECT DESCRICAO, VALOR, VENCIMENTO FROM CONTAS_PAGAR

SELECT DESCRICAO, VALOR, VENCIMENTO, 'RECEBER' AS TIPO FROM CONTAS_RECEBER
UNION
SELECT DESCRICAO, VALOR, VENCIMENTO, 'PAGAR' FROM CONTAS_PAGAR

SELECT DESCRICAO, VALOR, VENCIMENTO, 'RECEBER' AS TIPO FROM CONTAS_RECEBER
UNION
SELECT DESCRICAO, VALOR, VENCIMENTO, 'PAGAR' FROM CONTAS_PAGAR
ORDER BY VENCIMENTO

SELECT DESCRICAO, VALOR, VENCIMENTO, 'RECEBER' AS TIPO FROM CONTAS_RECEBER
UNION ALL --exibe todos os registros mesmo os iguais
SELECT DESCRICAO, VALOR, VENCIMENTO, 'PAGAR' FROM CONTAS_PAGAR
ORDER BY VENCIMENTO






